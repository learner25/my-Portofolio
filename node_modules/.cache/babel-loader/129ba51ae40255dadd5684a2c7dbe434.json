{"ast":null,"code":"var _jsxFileName = \"/Users/Admin/Downloads/the-substance-master/src/diamonds/Diamonds.js\";\nimport { WebGLRenderTarget, Object3D } from \"three\";\nimport React, { useRef, useMemo } from \"react\";\nimport { useLoader, useThree, useFrame } from \"react-three-fiber\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport lerp from \"lerp\";\nimport BackfaceMaterial from \"./BackfaceMaterial\";\nimport RefractionMaterial from \"./RefractionMaterial\";\nimport { useBlock } from \"../blocks\";\nimport state from \"../store\";\nvar dummy = new Object3D();\nexport default function Diamonds() {\n  var gltf = useLoader(GLTFLoader, \"/diamond.glb\"); //useMemo(() => gltf.scene.children[0].geometry.center(), [])\n\n  var _useThree = useThree(),\n      size = _useThree.size,\n      gl = _useThree.gl,\n      scene = _useThree.scene,\n      camera = _useThree.camera,\n      clock = _useThree.clock;\n\n  var _useBlock = useBlock(),\n      contentMaxWidth = _useBlock.contentMaxWidth,\n      sectionHeight = _useBlock.sectionHeight,\n      mobile = _useBlock.mobile;\n\n  var model = useRef();\n  var ratio = gl.getPixelRatio();\n  useFrame(function () {\n    state.diamonds.forEach(function (data, i) {\n      var t = clock.getElapsedTime() / 2;\n      var x = data.x,\n          offset = data.offset,\n          scale = data.scale,\n          factor = data.factor;\n      var s = contentMaxWidth / 35 * scale;\n      data.pos.set(mobile ? 0 : x, lerp(data.pos.y, -sectionHeight * offset * factor + state.top.current / state.zoom * factor, 0.1), 0);\n      dummy.position.copy(data.pos);\n      if (i === state.diamonds.length - 1) dummy.rotation.set(0, t, 0);else dummy.rotation.set(t, t, t);\n      dummy.scale.set(s, s, s);\n      dummy.updateMatrix();\n      model.current.setMatrixAt(i, dummy.matrix);\n      model.current.instanceMatrix.needsUpdate = true;\n    });\n    gl.autoClear = false;\n    camera.layers.set(0);\n    gl.setRenderTarget(envFbo);\n    gl.clearColor();\n    gl.render(scene, camera);\n    gl.clearDepth();\n    camera.layers.set(1);\n    model.current.material = backfaceMaterial;\n    gl.setRenderTarget(backfaceFbo);\n    gl.clearDepth();\n    gl.render(scene, camera);\n    camera.layers.set(0);\n    gl.setRenderTarget(null);\n    gl.render(scene, camera);\n    gl.clearDepth();\n    camera.layers.set(1);\n    model.current.material = refractionMaterial;\n    gl.render(scene, camera);\n  }, 1);\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", {\n    ref: model,\n    layers: 1,\n    args: [null, null, state.diamonds.length],\n    position: [0, 0, 50],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", Object.assign({\n    attach: \"geometry\"\n  }, gltf.__$[1].geometry, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/Admin/Downloads/the-substance-master/src/diamonds/Diamonds.js"],"names":["WebGLRenderTarget","Object3D","React","useRef","useMemo","useLoader","useThree","useFrame","GLTFLoader","lerp","BackfaceMaterial","RefractionMaterial","useBlock","state","dummy","Diamonds","gltf","size","gl","scene","camera","clock","contentMaxWidth","sectionHeight","mobile","model","ratio","getPixelRatio","diamonds","forEach","data","i","t","getElapsedTime","x","offset","scale","factor","s","pos","set","y","top","current","zoom","position","copy","length","rotation","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","autoClear","layers","setRenderTarget","envFbo","clearColor","render","clearDepth","material","backfaceMaterial","backfaceFbo","refractionMaterial","__$","geometry"],"mappings":"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","sourcesContent":["import { WebGLRenderTarget, Object3D } from \"three\"\nimport React, { useRef, useMemo } from \"react\"\nimport { useLoader, useThree, useFrame } from \"react-three-fiber\"\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\nimport lerp from \"lerp\"\nimport BackfaceMaterial from \"./BackfaceMaterial\"\nimport RefractionMaterial from \"./RefractionMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nconst dummy = new Object3D()\nexport default function Diamonds() {\n  const gltf = useLoader(GLTFLoader, \"/diamond.glb\")\n  //useMemo(() => gltf.scene.children[0].geometry.center(), [])\n\n  const { size, gl, scene, camera, clock } = useThree()\n  const { contentMaxWidth, sectionHeight, mobile } = useBlock()\n  const model = useRef()\n  const ratio = gl.getPixelRatio()\n\n \n\n  useFrame(() => {\n    state.diamonds.forEach((data, i) => {\n      const t = clock.getElapsedTime() / 2\n      const { x, offset, scale, factor } = data\n      const s = (contentMaxWidth / 35) * scale\n      data.pos.set(mobile ? 0 : x, lerp(data.pos.y, -sectionHeight * offset * factor + (state.top.current / state.zoom) * factor, 0.1), 0)\n      dummy.position.copy(data.pos)\n      if (i === state.diamonds.length - 1) dummy.rotation.set(0, t, 0)\n      else dummy.rotation.set(t, t, t)\n      dummy.scale.set(s, s, s)\n      dummy.updateMatrix()\n      model.current.setMatrixAt(i, dummy.matrix)\n      model.current.instanceMatrix.needsUpdate = true\n    })\n\n    gl.autoClear = false\n    camera.layers.set(0)\n    gl.setRenderTarget(envFbo)\n    gl.clearColor()\n    gl.render(scene, camera)\n    gl.clearDepth()\n    camera.layers.set(1)\n    model.current.material = backfaceMaterial\n    gl.setRenderTarget(backfaceFbo)\n    gl.clearDepth()\n    gl.render(scene, camera)\n    camera.layers.set(0)\n    gl.setRenderTarget(null)\n    gl.render(scene, camera)\n    gl.clearDepth()\n    camera.layers.set(1)\n    model.current.material = refractionMaterial\n    gl.render(scene, camera)\n  }, 1)\n\n  return (\n    <instancedMesh ref={model} layers={1} args={[null, null, state.diamonds.length]} position={[0, 0, 50]}>\n      <bufferGeometry attach=\"geometry\" {...gltf.__$[1].geometry} />\n    </instancedMesh>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}