{"ast":null,"code":"import _classCallCheck from\"/Users/Admin/Downloads/the-substance-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/Admin/Downloads/the-substance-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/Admin/Downloads/the-substance-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import{ShaderMaterial,BackSide}from\"three\";var BackfaceMaterial=/*#__PURE__*/function(_ShaderMaterial){_inherits(BackfaceMaterial,_ShaderMaterial);var _super=_createSuper(BackfaceMaterial);function BackfaceMaterial(){_classCallCheck(this,BackfaceMaterial);return _super.call(this,{vertexShader:\"varying vec3 worldNormal;\\n      void main() {\\n        vec4 transformedNormal = vec4(normal, 0.);\\n        vec4 transformedPosition = vec4(position, 1.0);\\n        #ifdef USE_INSTANCING\\n          transformedNormal = instanceMatrix * transformedNormal;\\n          transformedPosition = instanceMatrix * transformedPosition;\\n        #endif\\n        worldNormal = normalize(modelViewMatrix * transformedNormal).xyz;\\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\\n      }\",fragmentShader:\"varying vec3 worldNormal;\\n      void main() {\\n        gl_FragColor = vec4(worldNormal, 1.0);\\n      }\",side:BackSide});}return BackfaceMaterial;}(ShaderMaterial);export{BackfaceMaterial as default};","map":{"version":3,"sources":["/Users/Admin/Downloads/the-substance-master/src/diamonds/BackfaceMaterial.js"],"names":["ShaderMaterial","BackSide","BackfaceMaterial","vertexShader","fragmentShader","side"],"mappings":"0dAAA,OAASA,cAAT,CAAyBC,QAAzB,KAAyC,OAAzC,C,GAEqBC,CAAAA,gB,8HACnB,2BAAc,gEACN,CACJC,YAAY,4fADR,CAYJC,cAAc,0GAZV,CAgBJC,IAAI,CAAEJ,QAhBF,CADM,EAmBb,C,0BApB2CD,c,SAAzBE,gB","sourcesContent":["import { ShaderMaterial, BackSide } from \"three\"\n\nexport default class BackfaceMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize(modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }`,\n      side: BackSide\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}